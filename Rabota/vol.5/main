#include <SFML\Graphics.hpp>
#include <time.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include "Card.h"
#include "Game.h"


#define X 1200
#define Y 980

using namespace sf;

int CMP = 0;





int main()
{
	int fl = 0;
	int diller;
#pragma warning(disable : 4996)
	Font font;//шрифт 
	font.loadFromFile("CyrilicOld.ttf");//передаем нашему шрифту файл шрифта
	Text text("", font, 50);//создаем объект текст. закидываем в объект текст строку, шрифт, размер шрифта(в пикселях);//сам объект текст (не строка)
	text.setColor(sf::Color::White);//покрасили текст в красный. если убрать эту строку, то по умолчанию он белый
	text.setStyle(Text::Bold | Text::Underlined);//жирный и подчеркнутый текст. по умолчанию он "худой":)) и не подчеркнутый
	text.setPosition(2, 650);//задаем позицию текста

	RenderWindow app(VideoMode(X, Y), "21(Ochko) or Black Jack");

	// Создаём переменную текстуры
	Texture texture1, texture2, texture3,
		texture4, texture5, texture6, texture7,
		texture8, texture9, texture10, textureV,
		textureD, textureK, textureT, textureR,
		textureEWE, textureHVATIT, texturePEREMEWAT, textureWIN, textureLOSE, textureDRAW, textureFON;

	// Подгружаем нашу текстуру из файла 
	texture1.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\1.jpg");
	texture2.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\2.jpg");
	texture3.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\3.jpg");
	texture4.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\4.jpg");
	texture5.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\5.jpg");
	texture6.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\6.jpg");
	texture7.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\7.jpg");
	texture8.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\8.jpg");
	texture9.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\9.jpg");
	texture10.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\10.jpg");
	textureV.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\Valet.jpg");
	textureD.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\Dama.jpg");
	textureK.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\Korol.jpg");
	textureT.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\Tuz.jpg");
	textureR.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\Rubashka.jpg");

	textureLOSE.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\LOSE.bmp");
	textureWIN.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\WIN.bmp");
	textureDRAW.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\DRAW.bmp");

	textureEWE.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\EWE.bmp");
	textureHVATIT.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\HVATIT.bmp");
	texturePEREMEWAT.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\PEREMEWAT.bmp");

	textureFON.loadFromFile("C:\\Users\\Timofey\\source\\repos\\SFML_21\\SFML_21\\cards\\FON.jpg");
	// Создаём спрайты

	Sprite spriteR(textureR);

	Sprite spriteWIN(textureWIN);
	Sprite spriteLOSE(textureLOSE);
	Sprite spriteDRAW(textureDRAW);

	Sprite spriteEWE(textureEWE);
	Sprite spriteHVATIT(textureHVATIT);
	Sprite spritePEREMEWAT(texturePEREMEWAT);

	Sprite spriteFON(textureFON);

	spriteEWE.move(900.f, 440.f);
	spriteHVATIT.move(1000.f, 440.f);
	spritePEREMEWAT.move(950.f, 300.f);


	spriteR.move(740.f, 250.f);

	spriteLOSE.move(740.f, 250.f);
	spriteWIN.move(740.f, 250.f);
	spriteDRAW.move(740.f, 250.f);

	Game GAME;
	GAME.make_deck();

	int itog;
	int you_win=0;
	int you_lose=0;
	int draw = 0;
	int VSE = 0;

	Text textopponent2("", font, 50);//создаем объект текст. закидываем в объект текст строку, шрифт, размер шрифта(в пикселях);//сам объект текст (не строка)
	if (GAME.getGamers() == 2)
	{
		diller = rand() % 3 + 1;
	}
	if (GAME.getGamers() == 3)
	{
		diller = rand() % 4 + 1;
		
		textopponent2.setColor(sf::Color::White);//покрасили текст в красный. если убрать эту строку, то по умолчанию он белый
		textopponent2.setStyle(Text::Bold | Text::Underlined);//жирный и подчеркнутый текст. по умолчанию он "худой":)) и не подчеркнутый
		textopponent2.setPosition(2, 600);//задаем позицию текста
	}

	Text textopponent1("", font, 50);//создаем объект текст. закидываем в объект текст строку, шрифт, размер шрифта(в пикселях);//сам объект текст (не строка)
	textopponent1.setColor(sf::Color::White);//покрасили текст в красный. если убрать эту строку, то по умолчанию он белый
	textopponent1.setStyle(Text::Bold | Text::Underlined);//жирный и подчеркнутый текст. по умолчанию он "худой":)) и не подчеркнутый
	textopponent1.setPosition(2, 550);//задаем позицию текста

	while (app.isOpen())
	{
		std::ostringstream playerScoreString;    // объявили переменную
		std::ostringstream opponent1ScoreString;
		if (GAME.getGamers() == 3)
		{
			std::ostringstream opponent2ScoreString;
			opponent2ScoreString << GAME.getScore_opponent2();
			if (diller == 3)
				textopponent2.setString("(Диллер) Очки противника 2: " + opponent2ScoreString.str());
			else
				textopponent2.setString("Очки противника 2: " + opponent2ScoreString.str());
		}

		playerScoreString << GAME.getScore_player();		//занесли в нее число очков, то есть формируем строку
		if (diller == 1)
			text.setString("(Диллер) Ваши очки: " + playerScoreString.str());//задаем строку тексту и вызываем сформированную выше строку методом .str()
		else
			text.setString("Ваши очки: " + playerScoreString.str());//задаем строку тексту и вызываем сформированную выше строку методом .str()
		
		opponent1ScoreString << GAME.getScore_opponent1();
		if (diller == 2)
			textopponent1.setString("(Диллер) Очки противника 1: " + opponent1ScoreString.str());
		else
			textopponent1.setString("Очки противника 1: " + opponent1ScoreString.str());

		//Вектор, хранящий координаты курсора мыши
		Vector2i mousePoz = Mouse::getPosition(app);
		Event event;

		while (app.pollEvent(event))
		{


			switch (event.type)
			{
			case Event::Closed:
				app.close();
				break;
			case Event::MouseButtonPressed:
				if ((event.key.code == Mouse::Left) && (spriteHVATIT.getGlobalBounds().contains(mousePoz.x, mousePoz.y)) && (VSE == 0))
				{
					int j = 0;
					int stop = 0;
					Sprite tmp1;
					while ((stop != 1) || CMP > GAME.kolvo) // Набор карт у противника 1
					{

							if (GAME.takeCard(CMP) == '1')
							{
								if (GAME.getScore_opponent1() + 1 <= 21)
								{
									tmp1.setTexture(texture1);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 2);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 1);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '2')
							{
								
								
								if (GAME.getScore_opponent1() + 2 <= 21)
								{
									tmp1.setTexture(texture2);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 2);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '3')
							{
								
								
								if (GAME.getScore_opponent1() + 3 <= 21)
								{
									tmp1.setTexture(texture3);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 3);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '4')
							{
								
							
								if (GAME.getScore_opponent1() + 4 <= 21)
								{
									tmp1.setTexture(texture4);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 4);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '5')
							{
								
							
								if (GAME.getScore_opponent1() + 5 <= 21)
								{
									tmp1.setTexture(texture5);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 5);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '6')
							{
								
								
								if (GAME.getScore_opponent1() + 6 <= 21)
								{
									tmp1.setTexture(texture6);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 6);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '7')
							{
								
								
								if (GAME.getScore_opponent1() + 7 <= 21)
								{
									tmp1.setTexture(texture7);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 7);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '8')
							{
								
							
								if (GAME.getScore_opponent1() + 8 <= 21)
								{
									tmp1.setTexture(texture8);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 8);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '9')
							{
								
							
								if (GAME.getScore_opponent1() + 9 <= 21)
								{
									tmp1.setTexture(texture9);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 9);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '10')
							{
								
								
								if (GAME.getScore_opponent1() + 10 <= 21)
								{
									tmp1.setTexture(texture10);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 10);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'V')
							{
								
								
								if (GAME.getScore_opponent1() + 2 <= 21)
								{
									tmp1.setTexture(textureV);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 2);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'D')
							{
								
								
								if (GAME.getScore_opponent1() + 3 <= 21)
								{
									tmp1.setTexture(textureD);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 3);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'K')
							{
								
								
								if (GAME.getScore_opponent1() + 4 <= 21)
								{
									tmp1.setTexture(textureK);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 4);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'T')
							{
								
								
								if (GAME.getScore_opponent1() + 11 <= 21)
								{
									tmp1.setTexture(textureT);
									tmp1.setPosition(150 * j, 0);
									GAME.settSprite(CMP, tmp1);
									GAME.setScore_opponent1(GAME.getScore_opponent1() + 11);
									GAME.setFlag(CMP, 2);
								}
								else
									stop = 1;
							}
						
						j++;
						CMP++;
					} 
					stop = 0;
					j = 0;
					if (GAME.getGamers() == 3)
					{
						while ((stop != 1) || CMP > GAME.kolvo) // Набор карт у противника 2
						{
							if (GAME.takeCard(CMP) == '1')
							{
								
								if (GAME.getScore_opponent2() + 1 <= 21)
								{
									tmp1.setTexture(texture1);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 1);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '2')
							{
								
								if (GAME.getScore_opponent2() + 2 <= 21)
								{
									tmp1.setTexture(texture2);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '3')
							{
								
								if (GAME.getScore_opponent2() + 3 <= 21)
								{
									tmp1.setTexture(texture3);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 3);
								}
									
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '4')
							{
								
								if (GAME.getScore_opponent2() + 4 <= 21)
								{
									tmp1.setTexture(texture4);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 4);
								}
									
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '5')
							{
								
								if (GAME.getScore_opponent2() + 5 <= 21)
								{
									tmp1.setTexture(texture5);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 5);
								}
									
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '6')
							{
								
								if (GAME.getScore_opponent2() + 6 <= 21)
								{
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 6);
									tmp1.setPosition(150 * j, 300);
									tmp1.setTexture(texture6);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '7')
							{
								
								if (GAME.getScore_opponent2() + 7 <= 21)
								{
									tmp1.setTexture(texture7);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 7);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '8')
							{
								
								if (GAME.getScore_opponent2() + 8 <= 21)
								{
									tmp1.setTexture(texture8);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 8);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '9')
							{
								
								if (GAME.getScore_opponent2() + 9 <= 21)
								{
									tmp1.setTexture(texture9);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 9);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == '10')
							{
								if (GAME.getScore_opponent2() + 10 <= 21)
								{
									tmp1.setTexture(texture10);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 10);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'V')
							{
								
								if (GAME.getScore_opponent2() + 2 <= 21)
								{
									tmp1.setTexture(textureV);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 2);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'D')
							{
								
								if (GAME.getScore_opponent2() + 3 <= 21)
								{
									tmp1.setTexture(textureD);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 3);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'K')
							{
								
								if (GAME.getScore_opponent2() + 4 <= 21)
								{
									tmp1.setTexture(textureK);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 4);
								}
								else
									stop = 1;
							}
							if (GAME.takeCard(CMP) == 'T')
							{
								
								if (GAME.getScore_opponent2() + 11 <= 21)
								{
									tmp1.setTexture(textureT);
									tmp1.setPosition(150 * j, 300);
									GAME.settSprite(CMP, tmp1);
									GAME.setFlag(CMP, 3);
									GAME.setScore_opponent2(GAME.getScore_opponent2() + 11);
								}
								else
									stop = 1;
							}
							j++;
							CMP++;
						}
					}
//__________________________________________________________________________________________________________________________________________________________
					if (GAME.getGamers() == 2)
					{
						itog = GAME.proverka(GAME.getScore_player(), GAME.getScore_opponent1(), 3);
					}
					if (GAME.getGamers() == 3)
					{
						itog = GAME.proverka(GAME.getScore_player(), GAME.getScore_opponent1(), GAME.getScore_opponent2(), diller);
					}
					
					if (itog == 0)
						you_lose = 1;
					
					if (itog == 1)
						you_win = 1;
					
					if (itog == 2)
						draw = 1;
				}
				if ((event.key.code == Mouse::Left) && (spriteEWE.getGlobalBounds().contains(mousePoz.x, mousePoz.y)) && (VSE == 0))
				{
					fl = 1;
					if (GAME.takeCard(CMP) == '1')
					{
						Sprite tmp(texture1);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 1);
					}
					if (GAME.takeCard(CMP) == '2')
					{
						Sprite tmp(texture2);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 2);
					}
					if (GAME.takeCard(CMP) == '3')
					{
						Sprite tmp(texture3);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 3);
					}
					if (GAME.takeCard(CMP) == '4')
					{
						Sprite tmp(texture4);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 4);
					}
					if (GAME.takeCard(CMP) == '5')
					{
						Sprite tmp(texture5);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 5);
					}
					if (GAME.takeCard(CMP) == '6')
					{
						Sprite tmp(texture6);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 6);
					}
					if (GAME.takeCard(CMP) == '7')
					{
						Sprite tmp(texture7);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 7);
					}
					if (GAME.takeCard(CMP) == '8')
					{
						Sprite tmp(texture8);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 8);
					}
					if (GAME.takeCard(CMP) == '9')
					{
						Sprite tmp(texture9);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 9);
					}
					if (GAME.takeCard(CMP) == '10')
					{
						Sprite tmp(texture10);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 10);
					}
					if (GAME.takeCard(CMP) == 'V')
					{
						Sprite tmp(textureV);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 2);
					}
					if (GAME.takeCard(CMP) == 'D')
					{
						Sprite tmp(textureD);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 3);
					}
					if (GAME.takeCard(CMP) == 'K')
					{
						Sprite tmp(textureK);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 4);
					}
					if (GAME.takeCard(CMP) == 'T')
					{
						Sprite tmp(textureT);
						tmp.setPosition(150 * CMP, Y - 255);
						GAME.settSprite(CMP, tmp);
						GAME.setFlag(CMP, 1);
						GAME.setScore_player(GAME.getScore_player() + 11);
					}
					CMP++;
				}
		
				if ((event.key.code == Mouse::Left) && (spritePEREMEWAT.getGlobalBounds().contains(mousePoz.x, mousePoz.y)))
				{
					if (fl == 0)
						GAME.peremewat();
				}
				break;
			}
		}
		//_________________________________________________________________________________________________________________________________

		app.draw(spriteFON);
		app.draw(spriteEWE);
		app.draw(spriteHVATIT);
		app.draw(spritePEREMEWAT);
		app.draw(spriteR);
		app.draw(text);
		app.draw(textopponent1);
		if(GAME.getGamers() == 3)
		app.draw(textopponent2);
		for (int i = 0; i < GAME.kolvo; i++)
		{
			if (GAME.getFlag(i) == 1)
					app.draw(GAME.showSprite(i));
			if (GAME.getFlag(i) == 2)
					app.draw(GAME.showSprite(i));
			if (GAME.getFlag(i) == 3)
					app.draw(GAME.showSprite(i));
		}

		if (you_win == 1)
		{
			app.draw(spriteWIN);
			VSE = 1;
		}

		if (you_lose == 1)
		{
			app.draw(spriteLOSE);
			VSE = 1;
		}
		if (draw == 1)
		{
			app.draw(spriteDRAW);
			VSE = 1;
		}

		// Отрисовка кадра
		app.display();
	}
	return 0;
}
